export { L as Account, a as Adapter, Q as AdapterInstance, P as AdapterSchemaCreation, J as AdditionalSessionFieldsInput, u as AdditionalSessionFieldsOutput, y as AdditionalUserFieldsInput, v as AdditionalUserFieldsOutput, n as Auth, p as AuthContext, g as AuthPluginSchema, B as BetterAuthOptions, h as BetterAuthPlugin, F as FilterActions, X as FilteredAPI, G as GenericEndpointContext, H as HookEndpointContext, t as InferAPI, I as InferOptionSchema, i as InferPluginErrorCodes, z as InferPluginTypes, r as InferSession, Y as InferSessionAPI, q as InferUser, a1 as LogHandlerParams, Z as LogLevel, a0 as Logger, M as Models, R as RateLimit, T as SecondaryStorage, S as Session, U as User, V as Verification, O as Where, W as WithJsDoc, E as betterAuth, a2 as createLogger, N as init, _ as levels, a3 as logger, $ as shouldPublishLog } from './shared/better-auth.ClujkCMK.cjs';
export { A as AtomListener, B as BetterAuthClientPlugin, C as ClientOptions, b as InferActions, h as InferAdditionalFromClient, a as InferClientAPI, c as InferErrorCodes, e as InferPluginsFromClient, f as InferSessionFromClient, g as InferUserFromClient, I as IsSignal, S as Store } from './shared/better-auth.Bb7LJw0e.cjs';
export { H as HIDE_METADATA } from './shared/better-auth.DEHJp1rk.cjs';
export { g as generateState, p as parseState } from './shared/better-auth.DaraubvE.cjs';
export * from 'better-call';
export * from 'zod/v4';
export { D as DeepPartial, E as Expand, H as HasRequiredKeys, c as LiteralNumber, L as LiteralString, e as LiteralUnion, O as OmitId, d as PreserveJSDoc, a as Prettify, P as PrettifyDeep, b as Primitive, R as RequiredKeysOf, S as StripEmptyObjects, U as UnionToIntersection, W as WithoutEmpty } from './shared/better-auth.ZSfSbnQT.cjs';
export { O as OAuth2Tokens, a as OAuthProvider, P as ProviderOptions } from './shared/better-auth.DyfNka02.cjs';
import 'kysely';
import 'zod/v4/core';
import 'zod';
import 'better-sqlite3';
import 'bun:sqlite';
import '@better-fetch/fetch';
import 'nanostores';
import 'jose';

declare function capitalizeFirstLetter(str: string): string;

declare const generateId: (size?: number) => string;

declare class BetterAuthError extends Error {
    constructor(message: string, cause?: string);
}
declare class MissingDependencyError extends BetterAuthError {
    constructor(pkgName: string);
}

export { BetterAuthError, MissingDependencyError, capitalizeFirstLetter, generateId };
