import { QueryClient } from '@tanstack/query-core';
import { ChangeMessage, Collection } from '@tanstack/db';
export type SyncOperation<TRow extends object, TKey extends string | number = string | number, TInsertInput extends object = TRow> = {
    type: `insert`;
    data: TInsertInput | Array<TInsertInput>;
} | {
    type: `update`;
    data: Partial<TRow> | Array<Partial<TRow>>;
} | {
    type: `delete`;
    key: TKey | Array<TKey>;
} | {
    type: `upsert`;
    data: Partial<TRow> | Array<Partial<TRow>>;
};
export interface SyncContext<TRow extends object, TKey extends string | number = string | number> {
    collection: Collection<TRow>;
    queryClient: QueryClient;
    queryKey: Array<unknown>;
    getKey: (item: TRow) => TKey;
    begin: () => void;
    write: (message: Omit<ChangeMessage<TRow>, `key`>) => void;
    commit: () => void;
}
export declare function performWriteOperations<TRow extends object, TKey extends string | number = string | number, TInsertInput extends object = TRow>(operations: SyncOperation<TRow, TKey, TInsertInput> | Array<SyncOperation<TRow, TKey, TInsertInput>>, ctx: SyncContext<TRow, TKey>): void;
export declare function createWriteUtils<TRow extends object, TKey extends string | number = string | number, TInsertInput extends object = TRow>(getContext: () => SyncContext<TRow, TKey> | null): {
    writeInsert(data: TInsertInput | Array<TInsertInput>): void;
    writeUpdate(data: Partial<TRow> | Array<Partial<TRow>>): void;
    writeDelete(key: TKey | Array<TKey>): void;
    writeUpsert(data: Partial<TRow> | Array<Partial<TRow>>): void;
    writeBatch(operations: Array<SyncOperation<TRow, TKey, TInsertInput>>): void;
};
