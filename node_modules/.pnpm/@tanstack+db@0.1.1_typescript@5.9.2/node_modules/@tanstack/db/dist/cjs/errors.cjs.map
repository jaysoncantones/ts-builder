{"version":3,"file":"errors.cjs","sources":["../../src/errors.ts"],"sourcesContent":["// Root error class for all TanStack DB errors\nexport class TanStackDBError extends Error {\n  constructor(message: string) {\n    super(message)\n    this.name = `TanStackDBError`\n  }\n}\n\n// Base error classes\nexport class NonRetriableError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `NonRetriableError`\n  }\n}\n\n// Schema validation error (exported from index for backward compatibility)\nexport class SchemaValidationError extends TanStackDBError {\n  type: `insert` | `update`\n  issues: ReadonlyArray<{\n    message: string\n    path?: ReadonlyArray<string | number | symbol>\n  }>\n\n  constructor(\n    type: `insert` | `update`,\n    issues: ReadonlyArray<{\n      message: string\n      path?: ReadonlyArray<string | number | symbol>\n    }>,\n    message?: string\n  ) {\n    const defaultMessage = `${type === `insert` ? `Insert` : `Update`} validation failed: ${issues\n      .map((issue) => `\\n- ${issue.message} - path: ${issue.path}`)\n      .join(``)}`\n\n    super(message || defaultMessage)\n    this.name = `SchemaValidationError`\n    this.type = type\n    this.issues = issues\n  }\n}\n\n// Collection Configuration Errors\nexport class CollectionConfigurationError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `CollectionConfigurationError`\n  }\n}\n\nexport class CollectionRequiresConfigError extends CollectionConfigurationError {\n  constructor() {\n    super(`Collection requires a config`)\n  }\n}\n\nexport class CollectionRequiresSyncConfigError extends CollectionConfigurationError {\n  constructor() {\n    super(`Collection requires a sync config`)\n  }\n}\n\nexport class InvalidSchemaError extends CollectionConfigurationError {\n  constructor() {\n    super(`Schema must implement the standard-schema interface`)\n  }\n}\n\nexport class SchemaMustBeSynchronousError extends CollectionConfigurationError {\n  constructor() {\n    super(`Schema validation must be synchronous`)\n  }\n}\n\n// Collection State Errors\nexport class CollectionStateError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `CollectionStateError`\n  }\n}\n\nexport class CollectionInErrorStateError extends CollectionStateError {\n  constructor(operation: string, collectionId: string) {\n    super(\n      `Cannot perform ${operation} on collection \"${collectionId}\" - collection is in error state. Try calling cleanup() and restarting the collection.`\n    )\n  }\n}\n\nexport class InvalidCollectionStatusTransitionError extends CollectionStateError {\n  constructor(from: string, to: string, collectionId: string) {\n    super(\n      `Invalid collection status transition from \"${from}\" to \"${to}\" for collection \"${collectionId}\"`\n    )\n  }\n}\n\nexport class CollectionIsInErrorStateError extends CollectionStateError {\n  constructor() {\n    super(`Collection is in error state`)\n  }\n}\n\nexport class NegativeActiveSubscribersError extends CollectionStateError {\n  constructor() {\n    super(`Active subscribers count is negative - this should never happen`)\n  }\n}\n\n// Collection Operation Errors\nexport class CollectionOperationError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `CollectionOperationError`\n  }\n}\n\nexport class UndefinedKeyError extends CollectionOperationError {\n  constructor(item: any) {\n    super(\n      `An object was created without a defined key: ${JSON.stringify(item)}`\n    )\n  }\n}\n\nexport class DuplicateKeyError extends CollectionOperationError {\n  constructor(key: string | number) {\n    super(\n      `Cannot insert document with ID \"${key}\" because it already exists in the collection`\n    )\n  }\n}\n\nexport class DuplicateKeySyncError extends CollectionOperationError {\n  constructor(key: string | number, collectionId: string) {\n    super(\n      `Cannot insert document with key \"${key}\" from sync because it already exists in the collection \"${collectionId}\"`\n    )\n  }\n}\n\nexport class MissingUpdateArgumentError extends CollectionOperationError {\n  constructor() {\n    super(`The first argument to update is missing`)\n  }\n}\n\nexport class NoKeysPassedToUpdateError extends CollectionOperationError {\n  constructor() {\n    super(`No keys were passed to update`)\n  }\n}\n\nexport class UpdateKeyNotFoundError extends CollectionOperationError {\n  constructor(key: string | number) {\n    super(\n      `The key \"${key}\" was passed to update but an object for this key was not found in the collection`\n    )\n  }\n}\n\nexport class KeyUpdateNotAllowedError extends CollectionOperationError {\n  constructor(originalKey: string | number, newKey: string | number) {\n    super(\n      `Updating the key of an item is not allowed. Original key: \"${originalKey}\", Attempted new key: \"${newKey}\". Please delete the old item and create a new one if a key change is necessary.`\n    )\n  }\n}\n\nexport class NoKeysPassedToDeleteError extends CollectionOperationError {\n  constructor() {\n    super(`No keys were passed to delete`)\n  }\n}\n\nexport class DeleteKeyNotFoundError extends CollectionOperationError {\n  constructor(key: string | number) {\n    super(\n      `Collection.delete was called with key '${key}' but there is no item in the collection with this key`\n    )\n  }\n}\n\n// Collection Handler Errors\nexport class MissingHandlerError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `MissingHandlerError`\n  }\n}\n\nexport class MissingInsertHandlerError extends MissingHandlerError {\n  constructor() {\n    super(\n      `Collection.insert called directly (not within an explicit transaction) but no 'onInsert' handler is configured.`\n    )\n  }\n}\n\nexport class MissingUpdateHandlerError extends MissingHandlerError {\n  constructor() {\n    super(\n      `Collection.update called directly (not within an explicit transaction) but no 'onUpdate' handler is configured.`\n    )\n  }\n}\n\nexport class MissingDeleteHandlerError extends MissingHandlerError {\n  constructor() {\n    super(\n      `Collection.delete called directly (not within an explicit transaction) but no 'onDelete' handler is configured.`\n    )\n  }\n}\n\n// Transaction Errors\nexport class TransactionError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `TransactionError`\n  }\n}\n\nexport class MissingMutationFunctionError extends TransactionError {\n  constructor() {\n    super(`mutationFn is required when creating a transaction`)\n  }\n}\n\nexport class TransactionNotPendingMutateError extends TransactionError {\n  constructor() {\n    super(\n      `You can no longer call .mutate() as the transaction is no longer pending`\n    )\n  }\n}\n\nexport class TransactionAlreadyCompletedRollbackError extends TransactionError {\n  constructor() {\n    super(\n      `You can no longer call .rollback() as the transaction is already completed`\n    )\n  }\n}\n\nexport class TransactionNotPendingCommitError extends TransactionError {\n  constructor() {\n    super(\n      `You can no longer call .commit() as the transaction is no longer pending`\n    )\n  }\n}\n\nexport class NoPendingSyncTransactionWriteError extends TransactionError {\n  constructor() {\n    super(`No pending sync transaction to write to`)\n  }\n}\n\nexport class SyncTransactionAlreadyCommittedWriteError extends TransactionError {\n  constructor() {\n    super(\n      `The pending sync transaction is already committed, you can't still write to it.`\n    )\n  }\n}\n\nexport class NoPendingSyncTransactionCommitError extends TransactionError {\n  constructor() {\n    super(`No pending sync transaction to commit`)\n  }\n}\n\nexport class SyncTransactionAlreadyCommittedError extends TransactionError {\n  constructor() {\n    super(\n      `The pending sync transaction is already committed, you can't commit it again.`\n    )\n  }\n}\n\n// Query Builder Errors\nexport class QueryBuilderError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `QueryBuilderError`\n  }\n}\n\nexport class OnlyOneSourceAllowedError extends QueryBuilderError {\n  constructor(context: string) {\n    super(`Only one source is allowed in the ${context}`)\n  }\n}\n\nexport class SubQueryMustHaveFromClauseError extends QueryBuilderError {\n  constructor(context: string) {\n    super(`A sub query passed to a ${context} must have a from clause itself`)\n  }\n}\n\nexport class InvalidSourceError extends QueryBuilderError {\n  constructor() {\n    super(`Invalid source`)\n  }\n}\n\nexport class JoinConditionMustBeEqualityError extends QueryBuilderError {\n  constructor() {\n    super(`Join condition must be an equality expression`)\n  }\n}\n\nexport class QueryMustHaveFromClauseError extends QueryBuilderError {\n  constructor() {\n    super(`Query must have a from clause`)\n  }\n}\n\n// Query Compilation Errors\nexport class QueryCompilationError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `QueryCompilationError`\n  }\n}\n\nexport class DistinctRequiresSelectError extends QueryCompilationError {\n  constructor() {\n    super(`DISTINCT requires a SELECT clause.`)\n  }\n}\n\nexport class HavingRequiresGroupByError extends QueryCompilationError {\n  constructor() {\n    super(`HAVING clause requires GROUP BY clause`)\n  }\n}\n\nexport class LimitOffsetRequireOrderByError extends QueryCompilationError {\n  constructor() {\n    super(\n      `LIMIT and OFFSET require an ORDER BY clause to ensure deterministic results`\n    )\n  }\n}\n\nexport class CollectionInputNotFoundError extends QueryCompilationError {\n  constructor(collectionId: string) {\n    super(`Input for collection \"${collectionId}\" not found in inputs map`)\n  }\n}\n\nexport class UnsupportedFromTypeError extends QueryCompilationError {\n  constructor(type: string) {\n    super(`Unsupported FROM type: ${type}`)\n  }\n}\n\nexport class UnknownExpressionTypeError extends QueryCompilationError {\n  constructor(type: string) {\n    super(`Unknown expression type: ${type}`)\n  }\n}\n\nexport class EmptyReferencePathError extends QueryCompilationError {\n  constructor() {\n    super(`Reference path cannot be empty`)\n  }\n}\n\nexport class UnknownFunctionError extends QueryCompilationError {\n  constructor(functionName: string) {\n    super(`Unknown function: ${functionName}`)\n  }\n}\n\n// JOIN Operation Errors\nexport class JoinError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `JoinError`\n  }\n}\n\nexport class UnsupportedJoinTypeError extends JoinError {\n  constructor(joinType: string) {\n    super(`Unsupported join type: ${joinType}`)\n  }\n}\n\nexport class InvalidJoinConditionSameTableError extends JoinError {\n  constructor(tableAlias: string) {\n    super(\n      `Invalid join condition: both expressions refer to the same table \"${tableAlias}\"`\n    )\n  }\n}\n\nexport class InvalidJoinConditionTableMismatchError extends JoinError {\n  constructor(mainTableAlias: string, joinedTableAlias: string) {\n    super(\n      `Invalid join condition: expressions must reference table aliases \"${mainTableAlias}\" and \"${joinedTableAlias}\"`\n    )\n  }\n}\n\nexport class InvalidJoinConditionWrongTablesError extends JoinError {\n  constructor(\n    leftTableAlias: string,\n    rightTableAlias: string,\n    mainTableAlias: string,\n    joinedTableAlias: string\n  ) {\n    super(\n      `Invalid join condition: expressions reference tables \"${leftTableAlias}\" and \"${rightTableAlias}\" but join is between \"${mainTableAlias}\" and \"${joinedTableAlias}\"`\n    )\n  }\n}\n\nexport class UnsupportedJoinSourceTypeError extends JoinError {\n  constructor(type: string) {\n    super(`Unsupported join source type: ${type}`)\n  }\n}\n\n// GROUP BY and Aggregation Errors\nexport class GroupByError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `GroupByError`\n  }\n}\n\nexport class NonAggregateExpressionNotInGroupByError extends GroupByError {\n  constructor(alias: string) {\n    super(\n      `Non-aggregate expression '${alias}' in SELECT must also appear in GROUP BY clause`\n    )\n  }\n}\n\nexport class UnsupportedAggregateFunctionError extends GroupByError {\n  constructor(functionName: string) {\n    super(`Unsupported aggregate function: ${functionName}`)\n  }\n}\n\nexport class AggregateFunctionNotInSelectError extends GroupByError {\n  constructor(functionName: string) {\n    super(\n      `Aggregate function in HAVING clause must also be in SELECT clause: ${functionName}`\n    )\n  }\n}\n\nexport class UnknownHavingExpressionTypeError extends GroupByError {\n  constructor(type: string) {\n    super(`Unknown expression type in HAVING clause: ${type}`)\n  }\n}\n\n// Storage Errors\nexport class StorageError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `StorageError`\n  }\n}\n\nexport class SerializationError extends StorageError {\n  constructor(operation: string, originalError: string) {\n    super(\n      `Cannot ${operation} item because it cannot be JSON serialized: ${originalError}`\n    )\n  }\n}\n\n// LocalStorage Collection Errors\nexport class LocalStorageCollectionError extends StorageError {\n  constructor(message: string) {\n    super(message)\n    this.name = `LocalStorageCollectionError`\n  }\n}\n\nexport class StorageKeyRequiredError extends LocalStorageCollectionError {\n  constructor() {\n    super(`[LocalStorageCollection] storageKey must be provided.`)\n  }\n}\n\nexport class NoStorageAvailableError extends LocalStorageCollectionError {\n  constructor() {\n    super(\n      `[LocalStorageCollection] No storage available. Please provide a storage option or ensure window.localStorage is available.`\n    )\n  }\n}\n\nexport class NoStorageEventApiError extends LocalStorageCollectionError {\n  constructor() {\n    super(\n      `[LocalStorageCollection] No storage event API available. Please provide a storageEventApi option or ensure window is available.`\n    )\n  }\n}\n\nexport class InvalidStorageDataFormatError extends LocalStorageCollectionError {\n  constructor(storageKey: string, key: string) {\n    super(\n      `[LocalStorageCollection] Invalid data format in storage key \"${storageKey}\" for key \"${key}\".`\n    )\n  }\n}\n\nexport class InvalidStorageObjectFormatError extends LocalStorageCollectionError {\n  constructor(storageKey: string) {\n    super(\n      `[LocalStorageCollection] Invalid data format in storage key \"${storageKey}\". Expected object format.`\n    )\n  }\n}\n\n// Sync Cleanup Errors\nexport class SyncCleanupError extends TanStackDBError {\n  constructor(collectionId: string, error: Error | string) {\n    const message = error instanceof Error ? error.message : String(error)\n    super(\n      `Collection \"${collectionId}\" sync cleanup function threw an error: ${message}`\n    )\n    this.name = `SyncCleanupError`\n  }\n}\n\n// Query Optimizer Errors\nexport class QueryOptimizerError extends TanStackDBError {\n  constructor(message: string) {\n    super(message)\n    this.name = `QueryOptimizerError`\n  }\n}\n\nexport class CannotCombineEmptyExpressionListError extends QueryOptimizerError {\n  constructor() {\n    super(`Cannot combine empty expression list`)\n  }\n}\n"],"names":[],"mappings":"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"}