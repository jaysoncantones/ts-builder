"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const collection = require("./collection.cjs");
const SortedMap = require("./SortedMap.cjs");
const transactions = require("./transactions.cjs");
const proxy = require("./proxy.cjs");
const optimisticAction = require("./optimistic-action.cjs");
const localOnly = require("./local-only.cjs");
const localStorage = require("./local-storage.cjs");
const errors = require("./errors.cjs");
const baseIndex = require("./indexes/base-index.cjs");
const btreeIndex = require("./indexes/btree-index.cjs");
const lazyIndex = require("./indexes/lazy-index.cjs");
const index = require("./query/builder/index.cjs");
const functions = require("./query/builder/functions.cjs");
const index$1 = require("./query/compiler/index.cjs");
const liveQueryCollection = require("./query/live-query-collection.cjs");
exports.CollectionImpl = collection.CollectionImpl;
exports.createCollection = collection.createCollection;
exports.SortedMap = SortedMap.SortedMap;
exports.createTransaction = transactions.createTransaction;
exports.getActiveTransaction = transactions.getActiveTransaction;
exports.createArrayChangeProxy = proxy.createArrayChangeProxy;
exports.createChangeProxy = proxy.createChangeProxy;
exports.withArrayChangeTracking = proxy.withArrayChangeTracking;
exports.withChangeTracking = proxy.withChangeTracking;
exports.createOptimisticAction = optimisticAction.createOptimisticAction;
exports.localOnlyCollectionOptions = localOnly.localOnlyCollectionOptions;
exports.localStorageCollectionOptions = localStorage.localStorageCollectionOptions;
exports.AggregateFunctionNotInSelectError = errors.AggregateFunctionNotInSelectError;
exports.CannotCombineEmptyExpressionListError = errors.CannotCombineEmptyExpressionListError;
exports.CollectionConfigurationError = errors.CollectionConfigurationError;
exports.CollectionInErrorStateError = errors.CollectionInErrorStateError;
exports.CollectionInputNotFoundError = errors.CollectionInputNotFoundError;
exports.CollectionIsInErrorStateError = errors.CollectionIsInErrorStateError;
exports.CollectionOperationError = errors.CollectionOperationError;
exports.CollectionRequiresConfigError = errors.CollectionRequiresConfigError;
exports.CollectionRequiresSyncConfigError = errors.CollectionRequiresSyncConfigError;
exports.CollectionStateError = errors.CollectionStateError;
exports.DeleteKeyNotFoundError = errors.DeleteKeyNotFoundError;
exports.DistinctRequiresSelectError = errors.DistinctRequiresSelectError;
exports.DuplicateKeyError = errors.DuplicateKeyError;
exports.DuplicateKeySyncError = errors.DuplicateKeySyncError;
exports.EmptyReferencePathError = errors.EmptyReferencePathError;
exports.GroupByError = errors.GroupByError;
exports.HavingRequiresGroupByError = errors.HavingRequiresGroupByError;
exports.InvalidCollectionStatusTransitionError = errors.InvalidCollectionStatusTransitionError;
exports.InvalidJoinConditionSameTableError = errors.InvalidJoinConditionSameTableError;
exports.InvalidJoinConditionTableMismatchError = errors.InvalidJoinConditionTableMismatchError;
exports.InvalidJoinConditionWrongTablesError = errors.InvalidJoinConditionWrongTablesError;
exports.InvalidSchemaError = errors.InvalidSchemaError;
exports.InvalidSourceError = errors.InvalidSourceError;
exports.InvalidStorageDataFormatError = errors.InvalidStorageDataFormatError;
exports.InvalidStorageObjectFormatError = errors.InvalidStorageObjectFormatError;
exports.JoinConditionMustBeEqualityError = errors.JoinConditionMustBeEqualityError;
exports.JoinError = errors.JoinError;
exports.KeyUpdateNotAllowedError = errors.KeyUpdateNotAllowedError;
exports.LimitOffsetRequireOrderByError = errors.LimitOffsetRequireOrderByError;
exports.LocalStorageCollectionError = errors.LocalStorageCollectionError;
exports.MissingDeleteHandlerError = errors.MissingDeleteHandlerError;
exports.MissingHandlerError = errors.MissingHandlerError;
exports.MissingInsertHandlerError = errors.MissingInsertHandlerError;
exports.MissingMutationFunctionError = errors.MissingMutationFunctionError;
exports.MissingUpdateArgumentError = errors.MissingUpdateArgumentError;
exports.MissingUpdateHandlerError = errors.MissingUpdateHandlerError;
exports.NegativeActiveSubscribersError = errors.NegativeActiveSubscribersError;
exports.NoKeysPassedToDeleteError = errors.NoKeysPassedToDeleteError;
exports.NoKeysPassedToUpdateError = errors.NoKeysPassedToUpdateError;
exports.NoPendingSyncTransactionCommitError = errors.NoPendingSyncTransactionCommitError;
exports.NoPendingSyncTransactionWriteError = errors.NoPendingSyncTransactionWriteError;
exports.NoStorageAvailableError = errors.NoStorageAvailableError;
exports.NoStorageEventApiError = errors.NoStorageEventApiError;
exports.NonAggregateExpressionNotInGroupByError = errors.NonAggregateExpressionNotInGroupByError;
exports.NonRetriableError = errors.NonRetriableError;
exports.OnlyOneSourceAllowedError = errors.OnlyOneSourceAllowedError;
exports.QueryBuilderError = errors.QueryBuilderError;
exports.QueryCompilationError = errors.QueryCompilationError;
exports.QueryMustHaveFromClauseError = errors.QueryMustHaveFromClauseError;
exports.QueryOptimizerError = errors.QueryOptimizerError;
exports.SchemaMustBeSynchronousError = errors.SchemaMustBeSynchronousError;
exports.SchemaValidationError = errors.SchemaValidationError;
exports.SerializationError = errors.SerializationError;
exports.StorageError = errors.StorageError;
exports.StorageKeyRequiredError = errors.StorageKeyRequiredError;
exports.SubQueryMustHaveFromClauseError = errors.SubQueryMustHaveFromClauseError;
exports.SyncCleanupError = errors.SyncCleanupError;
exports.SyncTransactionAlreadyCommittedError = errors.SyncTransactionAlreadyCommittedError;
exports.SyncTransactionAlreadyCommittedWriteError = errors.SyncTransactionAlreadyCommittedWriteError;
exports.TanStackDBError = errors.TanStackDBError;
exports.TransactionAlreadyCompletedRollbackError = errors.TransactionAlreadyCompletedRollbackError;
exports.TransactionError = errors.TransactionError;
exports.TransactionNotPendingCommitError = errors.TransactionNotPendingCommitError;
exports.TransactionNotPendingMutateError = errors.TransactionNotPendingMutateError;
exports.UndefinedKeyError = errors.UndefinedKeyError;
exports.UnknownExpressionTypeError = errors.UnknownExpressionTypeError;
exports.UnknownFunctionError = errors.UnknownFunctionError;
exports.UnknownHavingExpressionTypeError = errors.UnknownHavingExpressionTypeError;
exports.UnsupportedAggregateFunctionError = errors.UnsupportedAggregateFunctionError;
exports.UnsupportedFromTypeError = errors.UnsupportedFromTypeError;
exports.UnsupportedJoinSourceTypeError = errors.UnsupportedJoinSourceTypeError;
exports.UnsupportedJoinTypeError = errors.UnsupportedJoinTypeError;
exports.UpdateKeyNotFoundError = errors.UpdateKeyNotFoundError;
exports.BaseIndex = baseIndex.BaseIndex;
exports.IndexOperation = baseIndex.IndexOperation;
exports.BTreeIndex = btreeIndex.BTreeIndex;
exports.IndexProxy = lazyIndex.IndexProxy;
exports.LazyIndexWrapper = lazyIndex.LazyIndexWrapper;
exports.BaseQueryBuilder = index.BaseQueryBuilder;
exports.Query = index.Query;
exports.add = functions.add;
exports.and = functions.and;
exports.avg = functions.avg;
exports.coalesce = functions.coalesce;
exports.concat = functions.concat;
exports.count = functions.count;
exports.eq = functions.eq;
exports.gt = functions.gt;
exports.gte = functions.gte;
exports.ilike = functions.ilike;
exports.inArray = functions.inArray;
exports.length = functions.length;
exports.like = functions.like;
exports.lower = functions.lower;
exports.lt = functions.lt;
exports.lte = functions.lte;
exports.max = functions.max;
exports.min = functions.min;
exports.not = functions.not;
exports.or = functions.or;
exports.sum = functions.sum;
exports.upper = functions.upper;
exports.compileQuery = index$1.compileQuery;
exports.createLiveQueryCollection = liveQueryCollection.createLiveQueryCollection;
exports.liveQueryCollectionOptions = liveQueryCollection.liveQueryCollectionOptions;
//# sourceMappingURL=index.cjs.map
