import { Aggregate, BasicExpression } from '../ir.js';
import { RefProxy } from './ref-proxy.js';
type ExpressionLike = BasicExpression | RefProxy<any> | any;
export declare function eq<T>(left: RefProxy<T>, right: T | RefProxy<T> | BasicExpression<T>): BasicExpression<boolean>;
export declare function eq<T extends string | number | boolean>(left: T | BasicExpression<T>, right: T | BasicExpression<T>): BasicExpression<boolean>;
export declare function eq<T>(left: Aggregate<T>, right: any): BasicExpression<boolean>;
export declare function gt<T>(left: RefProxy<T>, right: T | RefProxy<T> | BasicExpression<T>): BasicExpression<boolean>;
export declare function gt<T extends string | number>(left: T | BasicExpression<T>, right: T | BasicExpression<T>): BasicExpression<boolean>;
export declare function gt<T>(left: Aggregate<T>, right: any): BasicExpression<boolean>;
export declare function gte<T>(left: RefProxy<T>, right: T | RefProxy<T> | BasicExpression<T>): BasicExpression<boolean>;
export declare function gte<T extends string | number>(left: T | BasicExpression<T>, right: T | BasicExpression<T>): BasicExpression<boolean>;
export declare function gte<T>(left: Aggregate<T>, right: any): BasicExpression<boolean>;
export declare function lt<T>(left: RefProxy<T>, right: T | RefProxy<T> | BasicExpression<T>): BasicExpression<boolean>;
export declare function lt<T extends string | number>(left: T | BasicExpression<T>, right: T | BasicExpression<T>): BasicExpression<boolean>;
export declare function lt<T>(left: Aggregate<T>, right: any): BasicExpression<boolean>;
export declare function lte<T>(left: RefProxy<T>, right: T | RefProxy<T> | BasicExpression<T>): BasicExpression<boolean>;
export declare function lte<T extends string | number>(left: T | BasicExpression<T>, right: T | BasicExpression<T>): BasicExpression<boolean>;
export declare function lte<T>(left: Aggregate<T>, right: any): BasicExpression<boolean>;
export declare function and(left: ExpressionLike, right: ExpressionLike): BasicExpression<boolean>;
export declare function and(left: ExpressionLike, right: ExpressionLike, ...rest: Array<ExpressionLike>): BasicExpression<boolean>;
export declare function or(left: ExpressionLike, right: ExpressionLike): BasicExpression<boolean>;
export declare function or(left: ExpressionLike, right: ExpressionLike, ...rest: Array<ExpressionLike>): BasicExpression<boolean>;
export declare function not(value: ExpressionLike): BasicExpression<boolean>;
export declare function inArray(value: ExpressionLike, array: ExpressionLike): BasicExpression<boolean>;
export declare function like(left: RefProxy<string> | RefProxy<string | null> | RefProxy<string | undefined> | string | BasicExpression<string>, right: string | RefProxy<string> | BasicExpression<string>): BasicExpression<boolean>;
export declare function ilike(left: RefProxy<string> | RefProxy<string | null> | RefProxy<string | undefined> | string | BasicExpression<string>, right: string | RefProxy<string> | BasicExpression<string>): BasicExpression<boolean>;
export declare function upper(arg: RefProxy<string> | RefProxy<string | undefined> | string | BasicExpression<string>): BasicExpression<string>;
export declare function lower(arg: RefProxy<string> | RefProxy<string | undefined> | string | BasicExpression<string>): BasicExpression<string>;
export declare function length(arg: RefProxy<string> | RefProxy<string | undefined> | RefProxy<Array<any>> | RefProxy<Array<any> | undefined> | string | Array<any> | BasicExpression<string> | BasicExpression<Array<any>>): BasicExpression<number>;
export declare function concat(...args: Array<ExpressionLike>): BasicExpression<string>;
export declare function coalesce(...args: Array<ExpressionLike>): BasicExpression<any>;
export declare function add(left: RefProxy<number> | RefProxy<number | undefined> | number | BasicExpression<number>, right: RefProxy<number> | RefProxy<number | undefined> | number | BasicExpression<number>): BasicExpression<number>;
export declare function count(arg: ExpressionLike): Aggregate<number>;
export declare function avg(arg: RefProxy<number> | RefProxy<number | undefined> | number | BasicExpression<number>): Aggregate<number>;
export declare function sum(arg: RefProxy<number> | RefProxy<number | undefined> | number | BasicExpression<number>): Aggregate<number>;
export declare function min(arg: RefProxy<number> | RefProxy<number | undefined> | number | BasicExpression<number>): Aggregate<number>;
export declare function max(arg: RefProxy<number> | RefProxy<number | undefined> | number | BasicExpression<number>): Aggregate<number>;
/**
 * List of comparison function names that can be used with indexes
 */
export declare const comparisonFunctions: readonly ["eq", "gt", "gte", "lt", "lte", "in", "like", "ilike"];
export {};
